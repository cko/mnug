<h1>Meetup: 20st February 2014</h1>

<p>
    On 20st February 2014 we would like to invite you to our next community meetup of the Munich Node.JS User Group.
</p>

<h2>What?</h2>
<p>
    On 20st February 2014 we have the following schedule:
</p>
<ul>
    <li>
        <strong>19:00: Beer & Pizza</strong><br />
        <em>sponsored by <a href="http://www.tngtech.com/">TNG Technology Consulting</a></em>
    </li>
    <li>
        <strong>20:00: Node.js in Comparison to JEE 7 - REST based transactions in focus</strong><br />
        <em>by <a href="/speakers.html#franzs">Franz Sommer</a></em>
	<p>
	This talk will discuss a conundrum, how to achieve atomic transactions without locking Node.js. Additionally the current state of Node's enterprise usage will be discussed; case studies of WalMart, LinkedIn and PayPal suggest a dominance in front side applications. The session is closed with an enquiry into the readiness of Node.js for back end services. Two REST-based transaction prototypes implementing a classic transaction use case  are benchmarked for this purpose. Prototype one is based on Node.js, sequelize and restify, the other is a JEE7 application deployed to a  Glassfish 4.0. Both are served by a
postgres database.
	</p>
    </li>
    <li>
        <strong>21:00: Single-Page Applications with <a href="http://thoraxjs.org/">Thorax.js</a></strong><br />
        <em>by <a href="/speakers.html#patrickm">Patrick Mulder</a></em>
        <p>
	In this talk, I want to explore a client-server web architecture with Thorax and Node. Thorax is an opinionated web framework based on Backbone and Handlebars. In this talk I explore: 
	<ul>
	<li>Workflow automation based on Grunt, Yeoman and Requirejs.</li>
	<li>Thorax Views for managing events and rendering, incl. Handlebars </li>
	<li>Routers to address application state </li>
	<li>Some API basics for managing application state on the server-side </li>
	</ul>
        <a href="https://speakerdeck.com/mulderp/from-backbone-to-thorax">Slides</a> and <a href="https://github.com/mulderp/thorax_sandbox">Repo</a>
        </p>
    </li>
    <li>
        <strong>21:30: Isomorphic Web Applications Using <a href="https://github.com/airbnb/rendr">Rendr</a></strong><br />
        <em>by <a href="/speakers.html#christophn">Christoph Neuroth</a></em>
        <p>
	For web developers, the availability of server-side javascript (Node.js in particular) promises to make it possible to build "isomorphic" web applications, resuing the same JavaScript code on both the server and the client. But in reality there are more obstacles than the language. This talk will show how to tackle these using rendr, a small library from Airbnb that promises to run your Backbone.js apps seamlessly on both the client and the server.
        </p>
    </li>
    <li>
        <strong>22:00: How to refactor this?</strong><br />
        <em>by <a href="/speakers.html#dominiks">Dominik Schemmel</a></em>
	<p>
function (_) {for(_=[+[],++[[]][+[]],+[],_],_[++[++[++[[]][+[]]][+[]]][+[]]]=(((_[++[++[++[[]][+[]]][+[]]][+[]]]-(++[[]][+[]]))&(((--[[]][+[]])>>>(++[[]][+[]]))))===(_[++[++[++[[]][+[]]][+[]]][+[]]]-(++[[]][+[]])))?(_[++[++[[]][+[]]][+[]]]=++[[]][+[]],_[++[++[++[[]][+[]]][+[]]][+[]]]-(++[[]][+[]])):+[];_[++[++[++[[]][+[]]][+[]]][+[]]]--;_[+[]]=(_[++[[]][+[]]]=_[++[++[[]][+[]]][+[]]]=_[+[]]+_[++[[]][+[]]])-_[+[]]);return _[++[++[[]][+[]]][+[]]]; }
	</p>
	<p>
		<a href="../../downloads/MNUG_20140220_Refactoring.pdf">Slides</a>
	</p>
    </li>
    <li>
        <strong>22:30: Close down of MNUG meetup</strong><br />
        <em>by all <a href="#">node hackers</a></em>
    </li>
</ul>
</p>


<h2>When?</h2>
<p>
    Talks starting at 8:00pm. Admission with beer & pizza from 7pm.
</p>

<h2>Where?</h2>
<p>
    <strong>TNG Technology Consulting GmbH</strong> <br />
Betastraße 13a <br />
85774 Unterföhring <br />
<br />
    <strong>We wish you a nice journey:</strong><br />
   by S-Bahn: Unterföhring (S8)<br />
   by Bus: Linie 233, Haltestelle Betastraße<br />
   by Car: There are parking areas on the left side
</p>


